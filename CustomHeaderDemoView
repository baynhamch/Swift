//
//  SwipeHeaderView.swift
//  Reusable swipeable header with hub + per-user pages
//

import SwiftUI

// MARK: - Generic, reusable swipe header

struct SwipeHeaderView<Page>: View where Page: Equatable {
    // Data
    let pages: [Page]
    @Binding var index: Int

    // Content providers
    var title: (Page) -> String
    var subtitle: (Page) -> String

    // Styling / layout
    var accentColor: Color = Color(red: 0.35, green: 0.75, blue: 0.55)
    var height: CGFloat = 120

    /// Alignment rule for title/subtitle by position (i = current index, n = count)
    var alignmentRule: (_ i: Int, _ n: Int) -> Alignment = { i, n in
        if i == 0 { return .leading }
        if i == n - 1 { return .trailing }
        return .center
    }

    /// Padding rule for the accent line by position (i = current index, n = count)
    var linePaddingRule: (_ i: Int, _ n: Int) -> EdgeInsets = { i, n in
        if i == 0 { return EdgeInsets(top: 0, leading: 80, bottom: 0, trailing: 0) }
        if i == n - 1 { return EdgeInsets(top: 0, leading: 0, bottom: 0, trailing: 80) }
        return EdgeInsets(top: 0, leading: 120, bottom: 0, trailing: 120)
    }

    // Gesture tuning
    var threshold: CGFloat = 80
    var stiffness: CGFloat = 200
    var damping: CGFloat = 22
    var enableHaptics: Bool = true

    // Internal state
    @State private var dragOffset: CGFloat = 0
    @State private var crossedThreshold = false

    var body: some View {
        GeometryReader { _ in
            let n = pages.count
            let i = min(max(index, 0), max(n - 1, 0))
            let align = alignmentRule(i, n)

            VStack(spacing: 0) {
                // Title + subtitle
                VStack(alignment: horizontalAlign(from: align), spacing: 4) {
                    Text(title(pages[i]))
                        .font(.system(size: 32, weight: .bold, design: .serif))
                        .foregroundColor(.primary)
                        .frame(maxWidth: .infinity, alignment: align)
                        .offset(x: dragOffset * 0.20)
                        .animation(.spring(response: 0.4, dampingFraction: 0.7), value: index)

                    Text(subtitle(pages[i]))
                        .font(.system(size: 15))
                        .foregroundColor(.secondary)
                        .frame(maxWidth: .infinity, alignment: align)
                        .offset(x: dragOffset * 0.25)
                }
                .padding(.horizontal, 24)
                .padding(.top, 20)
                .padding(.bottom, 12)
                .frame(maxWidth: .infinity, alignment: align)

                // Accent line
                Rectangle()
                    .fill(accentColor)
                    .frame(height: 2)
                    .padding(linePaddingRule(i, n))
                    .offset(x: dragOffset)
            }
            .gesture(dragGesture)
            .animation(.interpolatingSpring(stiffness: stiffness, damping: damping), value: index)
        }
        .frame(height: height)
    }

    // MARK: - Gesture

    private var dragGesture: some Gesture {
        DragGesture(minimumDistance: 10)
            .onChanged { value in
                dragOffset = rubberBand(value.translation.width)
                let crossed = abs(value.translation.width) > threshold
                if crossed && !crossedThreshold {
                    crossedThreshold = true
                    #if os(iOS)
                    if enableHaptics {
                        UIImpactFeedbackGenerator(style: .rigid).impactOccurred()
                    }
                    #endif
                } else if !crossed {
                    crossedThreshold = false
                }
            }
            .onEnded { value in
                let dx = value.translation.width
                let vx = value.predictedEndTranslation.width - dx

                if abs(dx) > threshold || abs(vx) > 400 {
                    if dx < 0 && index < pages.count - 1 { index += 1 }   // swipe left → next
                    if dx > 0 && index > 0              { index -= 1 }   // swipe right → previous
                }

                withAnimation(.interpolatingSpring(stiffness: stiffness, damping: damping)) {
                    dragOffset = 0
                }
                crossedThreshold = false
            }
    }

    // MARK: - Helpers

    private func rubberBand(_ x: CGFloat) -> CGFloat {
        x / (1 + abs(x) / 150)
    }

    private func horizontalAlign(from alignment: Alignment) -> HorizontalAlignment {
        switch alignment {
        case .leading:  return .leading
        case .trailing: return .trailing
        default:        return .center
        }
    }
}

// MARK: - Convenience initializer for String pages

extension SwipeHeaderView where Page == String {
    init(
        pages: [String],
        index: Binding<Int>,
        accentColor: Color = Color(red: 0.35, green: 0.75, blue: 0.55),
        height: CGFloat = 120,
        threshold: CGFloat = 80,
        stiffness: CGFloat = 200,
        damping: CGFloat = 22,
        enableHaptics: Bool = true,
        title: @escaping (String) -> String = { page in
            if page == "Hub" { return "Health Hub" }
            if page == "Me"  { return "My Stats" }
            return "\(page)’s Stats"
        },
        subtitle: @escaping (String) -> String = { page in
            if page == "Hub" { return "All members • Combined view" }
            if page == "Me"  { return "Today’s stats" }
            return "Shared stats"
        },
        alignmentRule: @escaping (_ i: Int, _ n: Int) -> Alignment = { i, n in
            if i == 0 { return .leading }
            if i == n - 1 { return .trailing }
            return .center
        },
        linePaddingRule: @escaping (_ i: Int, _ n: Int) -> EdgeInsets = { i, n in
            if i == 0 { return EdgeInsets(top: 0, leading: 80, bottom: 0, trailing: 0) }
            if i == n - 1 { return EdgeInsets(top: 0, leading: 0, bottom: 0, trailing: 80) }
            return EdgeInsets(top: 0, leading: 120, bottom: 0, trailing: 120)
        }
    ) {
        self.pages = pages
        self._index = index
        self.accentColor = accentColor
        self.height = height
        self.threshold = threshold
        self.stiffness = stiffness
        self.damping = damping
        self.enableHaptics = enableHaptics
        self.title = title
        self.subtitle = subtitle
        self.alignmentRule = alignmentRule
        self.linePaddingRule = linePaddingRule
    }
}

// MARK: - Example usage 1: Health (Hub + users)

struct SharedHealthHeaderView: View {
    @State private var index = 0
    private let pages = ["Hub", "Me", "Sarah", "Ben", "Alice"]

    var body: some View {
        SwipeHeaderView(
            pages: pages,
            index: $index
        )
        .background(Color(.systemGroupedBackground))
    }
}

#Preview("Health Header") {
    SharedHealthHeaderView()
        .padding(.vertical)
        .background(Color(.systemGroupedBackground))
}

// MARK: - Example usage 2: Custom titles/subtitles + styling

struct CustomHeaderDemoView: View {
    @State private var index = 0
    private let pages = ["Hub", "Studio", "Reports", "Team"]

    var body: some View {
        SwipeHeaderView(
            pages: pages,
            index: $index,
            accentColor: .orange,
            height: 128,
            title: { page in
                switch page {
                case "Hub":     return "Project Hub"
                case "Studio":  return "Design Studio"
                case "Reports": return "Insights"
                case "Team":    return "Team Space"
                default:        return page
                }
            },
            subtitle: { page in
                page == "Hub" ? "Everything in one place" : "Swipe to navigate"
            }
        )
    }
}

#Preview("Custom Header") {
    CustomHeaderDemoView()
        .padding(.vertical)
        .background(Color(.systemGroupedBackground))
}
